#version 150
#moj_import <fog.glsl>
in vec3 Position;in vec4 Color;in vec2 UV0;in ivec2 UV2;uniform sampler2D Sampler0;uniform sampler2D Sampler2;uniform mat4 ModelViewMat;uniform mat4 ProjMat;uniform int FogShape;uniform vec2 ScreenSize;uniform float GameTime;out float vertexDistance;out vec4 vertexColor;out vec2 texCoord0;out float applyColor;
#define HEIGHT_BIT 13
#define MAX_BIT 10
#define ADD_OFFSET 4095
#define DEFAULT_OFFSET 10
bool more(vec3 i1, vec3 i2) {return (i1.x >= i2.x && i1.y >= i2.y && i1.z >= i2.z);}bool less(vec3 i1, vec3 i2) {return (i1.x <= i2.x && i1.y <= i2.y && i1.z <= i2.z);}float getDistance(mat4 modelViewMat, vec3 pos, int shape) {if (shape == 0) {return length((modelViewMat * vec4(pos, 1.0)).xyz);} else {float distXZ = length((modelViewMat * vec4(pos.x, 0.0, pos.z, 1.0)).xyz);float distY = length((modelViewMat * vec4(0.0, pos.y, 0.0, 1.0)).xyz);return max(distXZ, distY);}}void main() {vec3 pos = Position;float scale = ProjMat[0][0]* ScreenSize.x / 2.0;vec2 ui = ceil(ScreenSize / scale);vec3 color = Color.xyz;vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);applyColor = 0;if (pos.y >= ui.y) {int bit = int(pos.y) >> HEIGHT_BIT;if (((bit >> MAX_BIT) & 1) == 1) {int id = bit - (1 << MAX_BIT);pos.x -= 0.5 * ui.x;pos.y -= (bit << HEIGHT_BIT) + ADD_OFFSET + DEFAULT_OFFSET;float xGui = 0;float yGui = 0;float layer = 0;float opacity = 1;bool outline = false;int property = 0;switch (id) {case 1:xGui = ui.x * 50.0 / 100.0;yGui = ui.y * 100.0 / 100.0;break;case 2:xGui = ui.x * 50.0 / 100.0;yGui = ui.y * 100.0 / 100.0;outline = true;break;case 3:xGui = ui.x * 50.0 / 100.0;yGui = ui.y * 100.0 / 100.0;layer = 1;outline = true;break;case 4:xGui = ui.x * 100.0 / 100.0;yGui = ui.y * 50.0 / 100.0;break;case 5:xGui = ui.x * 100.0 / 100.0;yGui = ui.y * 50.0 / 100.0;layer = 1;outline = true;break;}vertexColor = ((pos.z == 0 || ceil(pos.z * 100) == 100000) && !outline) ? vec4(0) : Color * texelFetch(Sampler2, UV2 / 16, 0) * vec4(1, 1, 1, opacity);if ((property & 1) > 0) {pos.y += 4 * sin((GameTime * 1200 + pos.x / ui.x) * 3.1415 * 2);}if ((property & 2) > 0) {int hash = int(pos.x) * int(pos.y);float time = GameTime * 1200;hash = 31 * (hash + int(vertexColor.x + time));float r = float(hash % 224 + 32) / 255;hash = 31 * (hash + int(vertexColor.y + time));float g = float(hash % 224 + 32) / 255;hash = 31 * (hash + int(vertexColor.z + time));float b = float(hash % 224 + 32) / 255;float maxValue = max(max(r, g), b);vertexColor = vec4(pow(r / maxValue, 3), pow(g / maxValue, 3), pow(b / maxValue, 3), vertexColor.w);}if ((property & 4) > 0) {int hash = int(pos.x) * int(pos.y);float time = GameTime * 1200;hash = 31 * (hash + int(vertexColor.x + time));float r = vertexColor.x + float(hash % 64) / 255;hash = 31 * (hash + int(vertexColor.y + time));float g = vertexColor.y + float(hash % 64) / 255;hash = 31 * (hash + int(vertexColor.z + time));float b = vertexColor.z + float(hash % 64) / 255;vertexColor = vec4(r, g, b, vertexColor.w);}pos.x += xGui;pos.y += yGui;pos.z += layer;}} else {}vertexDistance = getDistance(ModelViewMat, pos, FogShape);texCoord0 = UV0;gl_Position = ProjMat * ModelViewMat * vec4(pos, 1.0);}